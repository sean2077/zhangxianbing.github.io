<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何加速 opencv-python 构建视频</title>
      <link href="/post/12734.html"/>
      <url>/post/12734.html</url>
      
        <content type="html"><![CDATA[<p>以生成一个 4k 为例，主要流程为创建 <code>cv2.VideoWriter</code> ，构建图片，写视频，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import cv2import numpy as npfrom tqdm import trange# 设置输出视频的宽度和高度width = 3840height = 2160# 创建视频编码器并设置参数fourcc = cv2.VideoWriter_fourcc(*"mp4v")fps = 25frame_num = 100video_writer = cv2.VideoWriter("output.mp4", fourcc, fps, (width, height))# 生成随机帧并将其写入视频for i in trange(frame_num):    # 生成随机图像    img = np.random.randint(0, 255, (height, width, 3)).astype(np.uint8)    # img = np.ones((height, width, 3)).astype(np.uint8) * 255    # 在图像上绘制文本    text = f"Frame {i}"    font = cv2.FONT_HERSHEY_SIMPLEX    font_scale = 3    thickness = 5    text_size, _ = cv2.getTextSize(text, font, font_scale, thickness)    text_x = int((width - text_size[0]) / 2)    text_y = int((height + text_size[1]) / 2)    cv2.putText(img, text, (text_x, text_y), font, font_scale, (0, 0, 255), thickness)    # 将图像写入视频    video_writer.write(img)# 释放视频编码器video_writer.release()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行的结果如下:</p><p><img src="/assets/Pasted%20image%2020230331115006.png"></p><p>可以看到速度只有 4.67 帧每秒，继续改进.</p><h1 id="多线程改造"><a href="#多线程改造" class="headerlink" title="多线程改造"></a>多线程改造</h1><p>试试采用多线程: 构建图片和写视频放两个线程，<code>queue. Queue</code> 在线程间传输图片:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import queueimport threadingimport cv2import numpy as npfrom tqdm import tqdm# 设置输出视频的宽度和高度width = 3840height = 2160# 创建视频编码器并设置参数fourcc = cv2.VideoWriter_fourcc(*"mp4v")fps = 25frame_num = 100video_writer = cv2.VideoWriter("output.mp4", fourcc, fps, (width, height))# 创建队列，用于在生成线程和写入线程之间传递帧frame_queue = queue.Queue(maxsize=100)# 生成随机帧并将其放入队列中def generate_frames():    for i in tqdm(range(frame_num), desc="gen", position=0):        # 生成图像        img = np.ones((height, width, 3)).astype(np.uint8) * 255        # 在图像上绘制文本        text = f"Frame {i}"        font = cv2.FONT_HERSHEY_SIMPLEX        font_scale = 3        thickness = 5        text_size, _ = cv2.getTextSize(text, font, font_scale, thickness)        text_x = int((width - text_size[0]) / 2)        text_y = int((height + text_size[1]) / 2)        cv2.putText(            img, text, (text_x, text_y), font, font_scale, (0, 0, 255), thickness        )        # 将图像放入队列中        frame_queue.put(img)    # 发送 sentinel 帧以指示写入线程结束    frame_queue.put(None)# 将生成的帧写入视频def write_video():    i = 0    with tqdm(total=frame_num, desc="out", position=1) as pbar:        while True:            # 从队列中获取下一帧            img = frame_queue.get()            if img is None:                # sentinel 帧指示写入线程结束                frame_queue.task_done()                break            # 将图像写入视频            video_writer.write(img)            # 释放队列中的锁            frame_queue.task_done()            # 更新进度条            pbar.update(1)            i += 1# 创建线程来生成帧generate_thread = threading.Thread(target=generate_frames)generate_thread.start()# 创建线程来写视频write_thread = threading.Thread(target=write_video)write_thread.start()# 等待所有帧都被写入视频frame_queue.join()# 等待写入线程完成write_thread.join()# 释放视频编码器video_writer.release()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果:</p><p><img src="/assets/Pasted%20image%2020230331115107.png"></p><p>提升到 6.27 帧每秒.</p><p>实际运行发现生成图片的线程是瓶颈，具体验证可以将上述生成图像的地方做如下改动：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 生成图像# img = np.random.randint(0, 255, (height, width, 3)).astype(np.uint8)img = np.ones((height, width, 3)).astype(np.uint8) * 255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/assets/Pasted%20image%2020230331115346.png"></p><p>可以看到瓶颈仍是生成图像. 考虑并发生成图像，因为生成图片的多是 CPU 操作，因此多线程的多生产者没有意义.</p><h1 id="多进程改造"><a href="#多进程改造" class="headerlink" title="多进程改造"></a>多进程改造</h1><p>Python 里因为 GIL 存在，多线程无法实现真正的并发，那考虑用多进程: N 个构建图片进程，1 个写视频，<code>mp.Queue</code> 在线程间传输图片</p><pre class="line-numbers language-ad-note" data-language="ad-note"><code class="language-ad-note">**multiprocessing.Manager中的Queue&nbsp;和&nbsp;multiprocessing.JoinableQueue&nbsp;性能相比如何?**由于multiprocessing.Manager中的Queue是基于共享内存实现的，因此其性能可能比multiprocessing.JoinableQueue略差。因为multiprocessing.JoinableQueue是基于multiprocessing.Queue实现的，而multiprocessing.Queue是基于消息传递的IPC机制来实现进程间通信的，它的性能通常会比基于共享内存的通信方式要好一些。此外，multiprocessing.Manager中的Queue和multiprocessing.JoinableQueue也有一些不同的应用场景。如果你的应用程序需要在多个进程之间共享任务并管理任务的状态，那么multiprocessing.JoinableQueue会更加适合，因为它提供了task_done()和join()方法来帮助跟踪任务的状态和数量。而multiprocessing.Manager中的Queue更适用于一些简单的进程间通信场景，例如传递简单的数据类型。总之，选择使用哪种队列类型取决于你的具体应用场景和需求。如果你的程序需要跟踪任务状态并进行任务管理，那么multiprocessing.JoinableQueue是更好的选择。如果你只是需要简单的进程间通信，那么multiprocessing.Manager中的Queue可能更合适一些。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">import queuefrom multiprocessing import Process, Queueimport cv2import numpy as npfrom tqdm import tqdm# 设置输出视频的宽度和高度width = 3840height = 2160# 创建视频编码器并设置参数fourcc = cv2.VideoWriter_fourcc(*"mp4v")fps = 25frame_num = 100# 创建队列，用于在生成进程和写入进程之间传递帧frame_queue = Queue(maxsize=100)# 生成随机帧并将其放入队列中def generate_frames(num_frames, frame_queue, pos):    for i in tqdm(range(num_frames), desc=f"gen{pos}", position=pos):        # 生成图像        img = np.random.randint(0, 255, (height, width, 3)).astype(np.uint8)        # 在图像上绘制文本        text = f"Frame {i}"        font = cv2.FONT_HERSHEY_SIMPLEX        font_scale = 3        thickness = 5        text_size, _ = cv2.getTextSize(text, font, font_scale, thickness)        text_x = int((width - text_size[0]) / 2)        text_y = int((height + text_size[1]) / 2)        cv2.putText(            img, text, (text_x, text_y), font, font_scale, (0, 0, 255), thickness        )        # 将图像放入队列中        frame_queue.put(img)    # 发送 sentinel 帧以指示写入进程结束    frame_queue.put(None)# 将生成的帧写入视频def write_video(frame_queue, pos):    video_writer = cv2.VideoWriter("output.mp4", fourcc, fps, (width, height))    i = 0    with tqdm(total=frame_num, desc="out", position=pos) as pbar:        while True:            # 从队列中获取下一帧            img = frame_queue.get()            if img is None:                # sentinel 帧指示写入进程结束                break            # 将图像写入视频            video_writer.write(img)            # 更新进度条            pbar.update(1)            i += 1    # 释放视频编码器    video_writer.release()# 创建进程来生成帧num_producer = 2frame_per_process = frame_num // num_producergenerate_processes = []for i in range(num_producer):    p = Process(target=generate_frames, args=(frame_per_process, frame_queue, i))    p.start()    generate_processes.append(p)# 创建进程来写视频write_process = Process(target=write_video, args=(frame_queue, num_producer))write_process.start()# 等待所有帧都被写入视频for p in generate_processes:    p.join()# 等待写入进程完成frame_queue.put(None)write_process.join()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个生产者的效果：</p><p><img src="/assets/Pasted%20image%2020230331124238.png"></p><p>生成图片和写视频的速度相比多线程版本都提升了，合理。</p><p>两个生产者的效果：</p><p><img src="/assets/Pasted%20image%2020230331124910.png"></p><p>效果反而相比单生产者差了，原因分析: 因为传输的图像是一个比较大的数据，序列化反序列化都会占 CPU，而进程间切换本身代价也大，因此每个进程的生成速度变慢。但总体上生成速度是 10 fps，超过单生产者，为啥写视频还是没提上来，上述测试可以看到 opencv-python 写 4k 视频的速度在 20 fps 以上（本机实测为 30 fps 左右），原因还是 mp. Queue 传取图像的瓶颈.</p><pre class="line-numbers language-ad-note" data-language="ad-note"><code class="language-ad-note">不能明确地说 mp.Queue 传取图像的瓶颈是多少 fps，因为传取图像是一个耗 CPU 的步骤，这个步骤会和进程中处理图像的步骤共同消耗 CPU 资源，如果处理图像占 CPU 多，则瓶颈就低，反正则高.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ol><li>多进程优于多线程</li><li>写高分辨率（如 4k）视频时, 多进程方案中 mp. Queue 传取图像的速度是瓶颈，因此采用单生产者 - 单消费者模型即可. (但写低分辨视频时，图像传输不一定是瓶颈，可以考虑增加生产者)</li><li>考虑到大多数情况，生成图像有严格顺序，因此多生产者也不好搞，还不如单生产者</li></ol>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下 CUDA 错误后重置 GPU 和驱动程序</title>
      <link href="/post/49031.html"/>
      <url>/post/49031.html</url>
      
        <content type="html"><![CDATA[<p>Linux 下调试 CUDA 程序时经常遇到各种错误导致异常退出，Device 状态异常导致无法再次运行 CUDA 程序，这时除了可以重启机器外，还可以通过命令行的方式解决:</p><p>按<code>ctrl+alt+F1</code>切换到 tty1（图形界面下无效）, 登录后输入以下命令:</p><pre class="line-numbers language-none"><code class="language-none">sudo rmmod nvidia_uvmsudo modprobe nvidia_uvm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考:</p><ul><li><a href="https://stackoverflow.com/a/57803619/14504212">https://stackoverflow.com/a/57803619/14504212</a></li><li><a href="https://askubuntu.com/a/109868/1195565">https://askubuntu.com/a/109868/1195565</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Hexo 博客 markdown 语法示例</title>
      <link href="/post/43699.html"/>
      <url>/post/43699.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p><footer><strong>@DevDocs <https: twitter.com="" devdocs="" status="" 356095192085962752=""></https:></strong></footer></blockquote><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin <http: sethgodin.typepad.com="" seths_blog="" 2009="" 07="" welcome-to-island-marketing.html=""> Welcome to Island Marketing</http:></strong></footer></blockquote><blockquote class="pullquote [class]"><p>content</p></blockquote><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
